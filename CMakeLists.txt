# Usage example:
# 1) mkdir build && cd build
# 2) conan install .. --build=missing
# 3) cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
# 4) cmake --build .
# Write benchmark results to a file with the --benchmark_out=<filename> option (or set BENCHMARK_OUT). Specify the output format with --benchmark_out_format={json|console|csv} (or set BENCHMARK_OUT_FORMAT={json|console|csv}). Note that the 'csv' reporter is deprecated and the saved .csv file is not parsable by csv parsers.
# Specifying --benchmark_out does not suppress the console output.

cmake_minimum_required(VERSION 3.2)

# Project declarartion
project(benchmark_template VERSION 0.0.1)

# Declaring main executable
add_executable(benchmark_cli main.cpp)

# Declaring dependencies
# Files for find_package are generated by conan.
find_package(benchmark REQUIRED)
find_package(Boost REQUIRED)

# Setting basic properties for targets
set_target_properties(benchmark_cli PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
)

# Path to include dirs
target_include_directories(benchmark_cli
    PRIVATE "${CMAKE_BINARY_DIR}"
    ${Boost_INCLUDE_DIR}
)

# Linking libraries to projects
target_link_libraries(benchmark_cli PRIVATE
    benchmark::benchmark 
)

# Function to set maximum warning level for compiler 
function(SetMaxWarning _project)
    if (MSVC)
        target_compile_options(${_project} PRIVATE
            /W4 /MD
    )
    else ()
        target_compile_options(${_project} PRIVATE
            -Wall -Wextra -pedantic -Werror
    )
    endif()
endfunction()

# Set Max Warning level to the project
#SetMaxWarning(benchmark_cli)
